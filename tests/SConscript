Import ('env')

if env['PLATFORM'] == 'posix':
   env.AppendENVPath ('LD_LIBRARY_PATH', 'syx')
else:
   env.AppendENVPath ('PATH', 'syx') # for windows

targets = []
deptarget = None

for test in ['testlexer', 'testimage', 'testcoldparser', 'testinstances', 'testparser', 'testinterp', 'testscheduler']:
    prog = env.Program (target=test, source=test+'.c', LIBS=['syx'])
    target = test+'.passed'
    env.AlwaysBuild (target)
    env.Depends (target, deptarget)
    deptarget = target
    targets.append (target)
    env.Test (target, prog)
    env.Clean ('syx', target)
    env.Clean (target, target+'.passed')

env.Alias ('test', targets)

def builder_test_summary (env, target, source):
    passed = 0
    failed = 0
    for s in source:
        try:
            f = open(s.abspath)
            if f.read () == 'PASSED':
                passed += 1
            else:
                failed += 1
            f.close ()
        except:
            failed += 1
    total = passed + failed
    print
    if not failed:
        print 'All %d tests passed.' % total
    else:
        print '%d of %d tests failed.' % (failed, total)

action = env.Action (builder_test_summary, lambda *args, **kwargs: '')
summary = env.Command ('tests.out', targets, action)
env.Alias ('test', summary)
