@c -*-texinfo-*-
@c This is part of the Smalltalk YX Manual.
@c Copyright (C) 2008
@c   Luca Bruno <lethalman88@gmail.com>
@c See the file syx.texi for copying conditions.

@menu
* Return value::
* Conditions::
* Loops::
@end menu

@cindex Block closures, Blocks
@tindex BlockClosure
Block closures are a kind of methods, @xref{Methods}, that are useful for executing code in methods for certain circumstances. Block closures, in fact, are declared inside methods. You can write code in blocks just like you do with methods.

In particular, in other programming languages, a closure is a method declared inside a method, but they are not often used. 
Instead in Smalltalk block closures have a very important role.

Like everything in Smalltalk, methods are objects and yet again block closures are objects. You can then send messages to them. Block closures won't be executed until you or the interpreter will send a particular message to them.

@findex value
The common message for executing block closures without passing any argument is @code{#value}. They are defined using squared braces:

@example
> [ ]!
a BlockClosure
@end example

This is an empty block closure, that hasn't been executed. Let's run something more interesting:

@example
> [ 'block' ] value!
'block'
@end example

What we done in the above example is creating a @var{BlockClosure}, with the statement @code{'block'} and send @code{#value} on it. This is straight the same result as doing the following operation:

@example
> 'block'!
'block'
@end example

The main differences between a method and a block are the following:

@itemize @bullet
@item Blocks are declared inside methods, while methods are declared inside a class.
@item A method has a selector, while a block doesn't, it's anonymous.
@item A block doesn't have a message pattern, but it can get arguments.
@item A method is relative to a class and its instance, instead a block can be transported among methods and stored inside variables.
@item A method must be explicit to return a specific value, a block returns automatically the last evaluated object.
@end itemize

The thing ``a block returns automatically the last evaluated object'' is the reason why in the previous example we saw 'block' on the output. That's because the block automatically returned the @var{String} 'block' from the block.

Now do something more useful. Let's pass some arguments to the block:

@example
> [ :arg1 :arg2 | arg1 + arg2 ] value: 2 value: 3!
5
@end example

Each parameter must have the prefix @kbd{:} (colon) and the body is separated from the parameters by a @kbd{|} (vertical bar).

@findex value:value:
We created a block closure, receiving 2 arguments. We called the block using the @code{#value:value:} message. The two arguments given to @code{#value:value:} are the ones passed to the block: (2, 3) -> (arg1, arg2).
The block gets executed, does the sum between arg1 and arg2, then the interpreter automatically returns the result 5.

@findex value:
Block closures have also the message @code{#value:} that requires a single argument.

@findex valueWithArguments:
Now let's use the message @code{#valueWithArguments:}. This method expects an array as its argument, @xref{Common classes}. This array will hold all the arguments that will be passed to the block:

@example
> [ :arg1 :arg2 | arg1 + arg2 ] valueWithArguments: #(2 3)!
5
@end example

The result is the same as before. Think that if you need to pass more than 2 arguments, for example 20, the @var{BlockClosure} class can't hold 20 different methods @code{#value:value:value:...}. @code{#valueWithArguments:} then is a valid choice when you have more than 2 arguments or when you don't know explicitely how many arguments to pass to the block.

@node Return value of blocks
@subsection Return value of blocks

The return value of a @var{BlockClosure} is different to the one of a straight method, but has the same meaning.

If you don't specify any particular value to be returned from a method, it will automatically return the receiver.
In blocks, the last evaluated object is returned:

@example
> [ #notReturned. 2 + 3 ] value!
5
@end example

Try switching statements now:

@example
> [ 2 + 3. #nowReturned ] value!
#nowReturned
@end example

But usually we want to return from the method itself, not only from the current block. This is done using the well known @kbd{^}, @xref{Return value}, but this time won't return only from the block but back to the caller of the method:

@example
method
        [ 'some ops'. ^2 + 3. #notExecuted ] value.
        "nothing gets executed here"
@end example

This method will return directly 5. 

@node Conditions
@subsection Conditions

@cindex Conditional control structures, Conditional expression
Conditional expressions are one of the three most important control structures that an imperative programming language has got. What we used until now are a plain sequence of statements.

The conditional structure is used to run a specific portion of code depending on the result of a conditional expression. A conditional expression must return a @var{Boolean} value: @var{true} or @var{false}. This expression @strong{decides} which portion of code is executed. Since only two values can be evaluated from such expression, there will be only to branches that can be executed.

For instance your applications wants to do an operation between two numbers. The user will give you three inputs: the first number, the operation (+, -) and the second number. The applicaiton doesn't know the operation before the user input, so if the user specifies ``+'', it will do the sum, if ``-'' the subtraction, and so on. @dfn{The application must decide which code to execute depending on the condition}.

This would be an algorithm:
@example
num1 = input
operator = input
num2 = input
if operator is '+' then
   result = num1 + num2
else if operator is '-' then
   result = num1 - num2
output result
@end example

The conditional expressions are @code{operator is '+'} and @code{operator is '-'}, while the two branches are @code{result = num1 + num2} and @code{result = num1 - num2}.
Of course, the first branch is executed when the operator is '+' while the second for '-'.

@findex =
@findex ifTrue:ifFalse:, ifTrue:, ifFalse, ifFalse:ifTrue:
A Smalltalk method that would concretize this algorithm would look like the following code:
@example
doOperation: operator on: num1 and: num2
   operator = '+'
      ifTrue: [ ^num1 + num2 ]
      ifFalse: [ ^num1 - num2 ]
@end example

The @code{#=} method of all @var{Object}s returns @var{true} if the receiver is equal to the argument, otherwise @var{false}. So, we are sure that expression evaluates to a @var{Boolean}.
Then the @var{Boolean} has a method named @code{#ifTrue:ifFalse:}. Both arguments receive a @var{BlockClosure}. Notice that the blocks are passed like any other normal @var{Object}, because they are @var{Object}s.

We used to send @code{#value} to execute a @var{BlockClosure}, @xref{Block closures}, but if now we send it both will be executed without taking care of the condition. Instead, only one must be executed depending on the condition. The @var{Boolean} class will send @var{#value} to the right @var{BlockClosure} for us.

@strong{Note}: in reality, @code{#ifTrue:ifFalse:} message is never sent. It's not parsed like a regular keyword message and it's compiled with special bytecodes.

@var{Boolean} objects doesn't have only @code{#ifTrue:ifFalse:}, but also @code{#ifTrue:}, @code{#ifFalse:} and @code{#ifFalse:ifTrue:}, which sometimes can be useful in terms of coding style.

The above code can be simplified further by using the return value of the blocks, without using the @kbd{^} operation:
@example
doOperation: operator on: num1 and: num2
   ^operator = '+'
      ifTrue: [ num1 + num2 ]
      ifFalse: [ num1 - num2 ]
@end example

Step by step:
@enumerate
@item
Send @code{#=} to operator with argument '+'
@item
This will result in a @var{Boolean} object
@item
If the result was @var{true}, execute the first block and get the value
@item
If the result was @var{false}, execute the second block and get the value
@item
Return the value returned by @var{#ifTrue:ifFalse:}
@end enumerate

These blocks are called also ``optimized blocks'' because the true/false blocks are inlined in the method itself. Then there's no need to create a @var{BlockClosure} and evaluating it. If the conditional statements weren't handled internally by the interpreter, it would have lead to a drastic slowdown of performances. But, don't be afraid they are called ``optimized blocks'', you can put in those blocks everything, jst like normal @var{BlockClosure}s.

@node Loops
@subsection Loops

Loops are the other important control structure of imperative programming languages. A loop or cycle is a block of instructions executed until a block evaluates to @var{false}. While in conditional structures you had an expression, this time you have a block. This because the condition must be checked everytime the a single cycle ends and another one is to begin depending on the conditional block return value:

@findex whileTrue:
@example
method
        | i |
        i := 0.
        [ i < 3 ]
            whileTrue: [ i := i + 1. i printNl ].
        ^i
@end example

Step by step:
@enumerate
@item
Declare a temporary variable named @var{i}
@item
Assign 0 to @var{i}
@item
Evaluate the conditional block
@item
`- 0 < 3? @var{true}, run the @code{#whileTrue:} block
@item
`-- increment @var{i} to 1 and print it
@item
`- 1 < 3? @var{true}, continue
@item
`-- increment @var{i} to 2 and print it
@item
`- 2 < 3? @var{true}
@item
`-- increment @var{i} to 3 and print it
@item
`- 3 < 3? @var{false}, stop the cycle
@item
Return 3
@end enumerate

As for conditional structures, there are also variants of this method for running loops:
@findex whileFalse:, whileTrue, whileFalse, repeat
@itemize @bullet
@item @code{#whileFalse:}, runs the cycle until the conditional block evaluates to @var{true} as opposite to @code{#whileTrue:}
@item @code{#whileTrue}, use only the @var{BlockClosure} (the receiver of the message) and execute it until the receiver answers @var{false}
@item @code{#whileFalse}, as opposite to @code{#whileTrue}, executes the @var{BlockClosure} until it answers @var{true}
@item @code{#repeat}, evaluates the @var{BlockClosure} forever, an infinite loop
@end itemize

Several ways for creating an infinite loop:
@example
[ true ] whileTrue: [ code ]
or
[ code. true ] whileTrue
or
[ code ] repeat
@end example

@findex timesRepeat:
Smalltalk is a flexible language, in fact there are other elegant ways to perform loops depending on what you need. Say you want to repeat a block a defined number of times:

@example
> 3 timesRepeat: [ 'Hello' printNl ]!
'Hello'
'Hello'
'Hello'
@end example

Notice that @code{#timesRepeat:} is a method of the @var{Integer} class. You must keep in mind that all methods for doing loops are based on @code{#whileTrue:}.

@findex do:
Now imagine you want to iterate through the elements of a @var{Collection}, say a @var{String}:
@example
> 'Hello' do: [ :ea | ea printNl ]!
$H
$e
$l
$l
$o
@end example

@tindex ArrayedCollection
The @var{#do:} method is widely used on many classes to iterate through elements. Notice that the @var{BlockClosure} you pass to the method accepts an argument: that argument holds the nth element of the @var{Collection} each time it's called. The order the block is called with depends on the @var{Collection} implementation. In this case, @var{String} and with all other @var{ArrayedCollection}s and @var{OrderedCollection}s, the @var{BlockClosure} is called with the same order you inserted the elements.

Another useful method in the @var{Integer} class is @code{#to:do:}:
@example
> 1 to: 3 do: [ :i | i printNl ]!
1
2
3
@end example

You guess what it does. It iterates 3 times and the argument of the @var{BlockClosure} is an index that goes from 1 to 3. There are several variants of this method, one of these is @code{#to:by:do}, which also accepts the steps toward the final number:
@example
> 2 to: 6 by: 2 do: [ :i | i printNl ]!
2
4
6
@end example
