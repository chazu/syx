@c -*-texinfo-*-
@c This is part of the Smalltalk YX Manual.
@c Copyright (C) 2008
@c   Luca Bruno <lethalman88@gmail.com>
@c See the file syx.texi for copying conditions.

Smalltalk has a set of basic objects to let you do basic operations.
These classes will be yet more documented, @xref{Smalltalk reference}.

@itemize @bullet
@tindex Object
@item @strong{Object}

This class is the base class of all objects, @xref{Inheritance}. It has the basic methods that are common to all objects, classes, metaclasses, and so on.

@tindex UndefinedObject
@vindex nil
@item @strong{UndefinedObject}

This class is used to describe the behavior of @var{nil}. It's not instanceable and has no really useful methods, as @var{nil} is used to describe a null/undefined value.

@tindex Number, Float
@item @strong{Number}, @strong{Float}

You already saw numbers along this manual. You can create a number by just writing it in your code.
If you have to write a decimal number (floating point number), use the @kbd{.} (dot), @samp{12.3}.

@tindex Boolean, True, False
@vindex true, false
@item @strong{Boolean}, @strong{True} and @strong{False}

These three classes are used to describe the behavior of @var{true} and @var{false}.
They are not instanceable, this means you cannot create new instances of them. The only available instances are @var{true} and @var{false}.

@tindex Character
@item @strong{Character}

A character can be created as literal with the @kbd{$} (dollar):

@example
> $e!
$e
@end example

You can also create a @var{Character} using a specific class method, for example when the value is special and it's to write using the keyboard:

@findex value:
@example
> Character value: 50!
$2
@end example

In this example, the output was $2 because 50 is the ASCII code of the number 2.

The range of ASCII character values is between 0 and 255 included (0xFF characters).

@tindex String
@cindex Literal strings
@item @strong{String}

@var{String}s are @dfn{an ordered list of @var{Character}s used to represent a human readable text}.
When you write first in your methods (literal strings), enclosing them between single quotes, they are immutable.
If you want to make it mutable, just copy it using @code{#copy}:

@example
> | s |
> s := 'text' copy!
'text'
@end example

Literal @var{String}s are immutable for an obvious motivation. The method holds a permanent list of literals that are used each time the method is called.
If you change the contents of a string the first time you run the method, the next time you will find the same string changed.

Let's assume literal strings weren't immutable:

@example
method
        ^'literal string'
@end example

If you invoke the method, you will get that 'literal string'. Then, if you change the contents of the method to hold 'not immutable string', the next time you invoke that method you will get 'not immutable string' even you didn't rewrite the method.

@tindex Array
@cindex Array of literals, Literal arrays
@item @strong{Array}

An @var{Array} is @dfn{fixed-size ordered list of objects}. That ``fixed-size'' stands for @dfn{you can't grow or shrink the array}. This doesn't mean it's immutable. You can replace an element in the array at any time, just like @var{String}s.

@example
> | a |
> a := Array new: 10.
> a at: 1 put: 'first position'.
> a at: 1!
'first position'
@end example

An @var{Array} is a kind of @var{Collection}. All @var{SequenceableCollection}s start with index 1. Instead in other programming languages, arrays start at 0.

The first statement is used to create an array of 10 elements. They will be initialized to @var{nil}.
The second message @code{#at:put:} replaces position 1 with 'first position'.
The third message @code{#at:} returns the first element of the array.

For the same reason explained above for @var{String}s, literal arrays are immutable.

You can create arrays in the methods on-the-fly like strings with two methods:
@enumerate
@item Arrays of literals are defined with #(...). They can contain only literals, not variables. Since the array of literals is itself a literal, you can put multiple nested array of literals: @samp{#(symbol #symbol #(nested array) 123 'string')}. Identifiers not starting with @code{#} are threated as symbols.
@item Dynamic arrays. This is a powerful aggregated method for creating arrays. Each element of the array is obtained by evaluating an expression. Each element/expression is separated by a @kbd{.} (dot): @verb{.{ 1 + 2. Object new. 'yarrA' reverse}.}.
@end enumerate

@end itemize
