@c -*-texinfo-*-
@c This is part of the Smalltalk YX Manual.
@c Copyright (C) 2008
@c   Luca Bruno <lethalman88@gmail.com>
@c See the file syx.texi for copying conditions.

@menu
* Command line interpreter::
* Hello world::
* Number operations::
* Quitting the interpreter::
* Command line arguments: Invoking syx.
@end menu

@cindex Command line
@pindex syx
@node Command line interpreter
@section Command line interpreter

Syx has two kind of environments for both launching and developing your applications.
The first, less intuitive but useful for small scripts and immediate tests, is the command line interpreter.
The name of the program is @command{syx}. Once you run it you will get into a console like this:

@example
Smalltalk YX @value{VERSION} is ready.
Type "help!" to get help.
>
@end example

@cindex Startup sequence

Behind the scene, launching @command{syx} would do the following steps:
@enumerate
@item load the @file{libsyx} library
@item initialize the external environment (root directory, image file, plugins directory, etc.)
@item load the @file{default.sim} image
@item initialize the Smalltalk environment
@item run the @var{Console}
@end enumerate

This manual will give you more explanations on how to customize this sequence from Smalltalk and also how to follow this boot sequence from your C/C++ applications in the next chapters.

When you see the @code{>} character at the beginnig, it means the previous command has been executed then the program is ready to interpret your next commands ``on the fly''.
To get a first approach to the environment, type @kbd{help!} and press @key{Enter} to get a basic list of available commands that might help you. This would be the result on your screen:

@example
> help!
'===========
To quit Smalltalk YX type "Smalltalk quit!" or press ^D (ctrl+D).
To say Hello World type:
 'Hello world'!

For more documentation and examples please visit the homepage or contact us.

Homepage: http://syx.googlecode.com
Mailing list: http://groups.google.com/group/syx-discuss
IRC channel: #syx on irc.freenode.net
E-mail: lethalman88 at gmail.com
==========='
>
@end example

@tindex String
@cindex Hello world
@node Hello world
@section Hello world

Notice that at the beginning and at the end of the text there's a @key{'} (single quote). Single quotes are used to create @var{String}s, which are @dfn{a sequence of human readable characters}. All the text you type inside two single quotes will be interpreted by Syx as a @var{String}. For instance, let's say the famous Hello world from Syx:

@code{'Hello world'!}

And this would be the output:

@example
> 'Hello world'!
'Hello world'
>
@end example

@cindex Exclamation mark

We have written our second command being interpreted by Syx. Please notice also that we ended our two commands with a @key{!} (exclamation mark). The exclamation mark is really important for parsing and interpreting, it's used to @dfn{end a sequence of statements}. Both with @code{help!} and @code{'Hello world'!} we specified one statement and then terminated it with the exclamation mark.

But, what if you want to use a single quote inside your text if @var{String}s are enclosed between single quotes? In this case the solution is trivial, just use two single quotes one next the other (''):

@example
> 'Hello''s world'!
'Hello's world'
>
@end example

@strong{Important}: from now on I will mostly show commands in the examples themselves, as first rows after the @code{>}.

At a first glance you can see a difference between other command line interpreters like @command{python}. We don't need to do @command{print} or such to display a @var{String}. This because the @var{Console} automatically @dfn{display the last evaluated object returned by the @var{Process}}.

Evaluating means @dfn{parsing and interpreting code from input}. In this case, the last returned object is the @var{String} ``Hello's world''.

@node Number operations
@section Number operations

@cindex Numbers
@tindex Number

Remember that in the previous chapter, @xref{What is Smalltalk}, I precised that @strong{everything} is an object. Well, like @var{String}s are objects also @var{Number}s are objects. Everytime you write a human readable number, it will be transformed into an object named @var{Number} in Syx:

@example
> 3!
3
>
@end example

Notice that this time the number is printed without single quotes, it has in fact a different way to be printed to the output. Doing some math in Syx is as simple as doing it in real life:

@findex +
@example
> 4 + 9!
13
>
@end example

Another example would be:

@findex *, +, -
@example
> 4 * 3 + 9 - 6!
15
>
@end example

Always remember to put the exclamation mark at the end of each row.

@cindex Exit, Quit
@findex Smalltalk quit
@node Quitting the interpreter
@section Quitting the interpreter

Now that you have done all the above tests, you can quit the program. The Smalltalk-ish way to do this is by issueing @code{Smalltalk quit!}:

@example
> Smalltalk quit!
@end example

The other way, more console-ish is to send an @acronym{EOF, End Of File}. This is done by pressing @key{Ctrl+D}, and you will see ``EOF'' on the output.

@cindex Command line arguments
@node Invoking syx
@section Invoking syx

