@c -*-texinfo-*-
@c This is part of the Smalltalk YX Manual.
@c Copyright (C) 2008
@c   Luca Bruno <lethalman88@gmail.com>
@c See the file syx.texi for copying conditions.

@cindex Variables scope

Variables are looked up in a particular way, much similar to other programming languages.
In fact, also Smalltalk uses the ``most recent variable'' philosophy. Think like you are in a hierarchy of contexts:

@var{Smalltalk} dictionary
`- A @var{Class}
   `- A method
      `- A @var{BlockClosure}
         `- Other nested blocks

Resolution of variables goes from the upper block down to the @var{Smalltalk} dictionary containing global variables.
This means if you have several temporary variables in the method, the one of the blocks are used first:

@example
> | tmp |
> tmp := 2.
> [ tmp := 3 ] value.
> tmp printNl!
3
@end example

@cindex Outer scope
You assigned the @var{tmp} variable to 3 from the @var{BlockClosure} and it has been printed to the stdout in out of the block. This means the @var{tmp} variable in the @var{BlockClosure} was the same declared in the @emph{outer scope}.

Now try declaring another @var{tmp} variable in the @var{BlockClosure}:

@example
> | tmp |
> tmp := 2.
> [ | tmp | tmp := 3 ] value.
> tmp printNl!
2
@end example

Now happened that in the @var{BlockClosure} there is another temporary variable named @var{tmp} which @emph{overrides the outer one}. So in the @var{BlockClosure} you @dfn{see the most recent declared variables}.

Same thing for arguments:
@example
> | tmp |
> tmp := 2.
> [ :tmp | tmp printNl ] value: tmp!
2
@end example

Remember that you can't assign values to parameters, @xref{Message pattern}.

A more complicated example:
@example
> | tmp |
> tmp := 2.
> [ | tmp | tmp := 3.
    [ | tmp | tmp := 4 ] value.
    tmp printNl ] value.
> tmp printNl!
3
2
@end example

After temporary variables and arguments, instance variables are looked up. Say you have this class:
@example
Object subclass: #Person instanceVariableNames: 'name surname'!
@end example

Let's create some useful methods:
@example
name
      ^name!

surname
      ^surname!

name: aString
      name := aString!

surname: aString
      surname := aString!
@end example

@var{name} and @var{surname} symbols refer to the instance variables.
Remember that the @emph{first letter} of temporaries, arguments and instance variables is lowercase.
Capital variables are class variables and global variables. Of course, class variables are looked up before global variables. Class variables, @xref{Variables}, can be accessed from the class and its instances.

@var{BlockClosure}s can be transported from a context to another one and evaluated at any time. They can be saved in instance variables or class variables for example. As you store them in a variable and the method will return, @dfn{the @var{BlockClosure} will still keep track of the method scope}.

Take in consideration these two methods:
@example
makeBlock: methodArg
         ^[ :blockArg | methodArg + blockArg ]!
@end example

Now create it, say we have an instance named @var{inst} which class holds the @code{#makeBlock:} method:
@example
> | block |
> block := inst makeBlock: 3.
> block value: 5!
8
@end example

Notice that the method returned the @var{BlockClosure}, i.e. the method terminated. Though @var{methodArg} is still alive in the block when you ``value it'' in the console. This is an expected result also with temporaries. The thing that doesn't work is the explicit return in the block. Say we have this method again:

@example
makeBlock: methodArg
        ^[ :blockArg | ^methodArg + blockArg]!
@end example

Once you value the @var{BlockClosure} in the console it won't work because the method context is dead. Remember with @kbd{^} you explicitely want to return from the method, but this is not possible once the method already returned.
